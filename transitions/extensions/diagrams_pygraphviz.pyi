from .diagrams import BaseGraph as BaseGraph
from .nesting import NestedState as NestedState
from typing import Any, List, Dict, Union, Optional
from logging import Logger
from pygraphviz import AGraph

_LOGGER: Logger
_super = super


class Graph(BaseGraph):
    fsm_graph: AGraph
    def _add_nodes(self, states: List[Dict[str, str]], container: AGraph) -> None: ...
    def _add_edges(self, transitions: List[Dict[str, str]], container: AGraph) -> None: ...
    def generate(self) -> None: ...
    def get_graph(self, title: Optional[str] = ..., roi_state: Optional[str] = ...) -> AGraph: ...
    def set_node_style(self, state: str, style: str) -> None: ...
    def set_previous_transition(self, src: str, dst: str) -> None: ...
    def reset_styling(self) -> None: ...


class NestedGraph(Graph):
    seen_transitions: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _add_nodes(self, states: List[Dict[str, str]], container: AGraph, prefix: str = ..., default_style: str = ...) -> None: ...
    def _add_edges(self, transitions: List[Dict[str, str]], container: AGraph) -> None: ...
    def set_node_style(self, state: Dict[str, str], style: str) -> None: ...
    def set_previous_transition(self, src: str, dst: str) -> None: ...

def _get_subgraph(graph: AGraph, name: str) -> Optional[AGraph]: ...
def _copy_agraph(graph: AGraph) -> AGraph: ...
